from sage.rings.finite_rings.hom_finite_field import FiniteFieldHomomorphism_generic
import numpy as np
F.<a> = GF(2^4, modulus = x^4 + x + 1)
G.<b> = GF(2^8, modulus = x^8 + x^4 + x^3 + x + 1)
H.<c> = GF(2^8, modulus = x^8 + x^7 + x^6 + x^5 + x^4 + x^2 + 1)
R1.<x> = F[]
R2.<y> = G[]
R3.<z> = H[]
FG = FiniteFieldHomomorphism_generic(Hom(F,G))
FH = FiniteFieldHomomorphism_generic(Hom(F,H))
v=a^3+1
f=x^2+x+v
f.is_primitive()
f=z^2+z+FH(v)
f.roots()
[(c^7 + c^5 + c^4 + c^3 + c^2 + c, 1),
 (c^7 + c^5 + c^4 + c^3 + c^2 + c + 1, 1)]
sage: (c^7 + c^5 + c^4 + c^3 + c^2 + c)^16
c^7 + c^5 + c^4 + c^3 + c^2 + c + 1

(c^7 + c^5 + c^4 + c^3 + c^2 + c).is_unit()
True
sage: (c^7 + c^5 + c^4 + c^3 + c^2 + c+1).is_unit()
True

beta0=f.roots()[0][0]
beta1=f.roots()[1][0]
#beta0=c^7 + c^5 + c^4 + c^3 + c^2 + c

#beta1=c^7 + c^5 + c^4 + c^3 + c^2 + c+1

#A recursive algo to convert an element in H into coordinates in basis [beta1,1]
def convt(x):
    if (x==0):
        return [0,0]
    if (x==1):
        return [0,1]
    if (x==beta1):
        return [1,0]
    
    pre=convt(beta1^(log(x,beta1)-1))
    resh = pre[0] ^^ pre[1]

    e=[]
    for i in range(0,4):
        e.append((pre[0]>>i) & 1)
     
    resl=int((F(e)*v)._int_repr())
    return [resh,resl]
  
def gen_T():
    res = []
    for i in reversed(range(0,8)):
        temvec=[]
        temp=convt(c^i)
        temvec.append((temp[0]>>3) & 1)
        temvec.append((temp[0]>>2) & 1)
        temvec.append((temp[0]>>1) & 1)
        temvec.append((temp[0]>>0) & 1)
        temvec.append((temp[1]>>3) & 1)
        temvec.append((temp[1]>>2) & 1)
        temvec.append((temp[1]>>1) & 1)
        temvec.append((temp[1]>>0) & 1)
        res.append(temvec)
    aa=np.array(res)
    return aa.T





    
